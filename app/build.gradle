/*
 *  Copyright (c) 2023 Sergey Komlach aka Salat-Cx65; Original project: https://github.com/Salat-Cx65/AdvancedBiometricPromptCompat
 *  All rights reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
android {
    lint {
        baseline = file("lint-baseline.xml")
    }
//    compileSdkPreview compileSDK
    compileSdk compileSDK
    defaultConfig {
        applicationId "dev.skomlach.biometric.app"
        minSdkVersion minSDK
        //targetSdkPreview targetSDK
        targetSdkVersion targetSDK
        versionCode libsMinorVersion
        versionName libsMajorVersion
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'dev.skomlach.biometric.app'
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }

}
kotlin {
    jvmToolchain(javaVersion.ordinal() + 1)
}
dependencies {
    implementation project(":" + libArtifactId_common)
    implementation project(":" + libArtifactId_biometric)
    implementation project(":" + libArtifactId_biometric)

//"dev.skomlach:biometric:${libsMajorVersion + "." + libsMinorVersion}"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.9.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.9.4'
    implementation 'org.smali:dexlib2:2.5.2'

    implementation 'com.google.iot.cbor:cbor:0.01.02'
//    //DevTools
//    //ANR's
//    implementation "com.github.anrwatchdog:anrwatchdog:1.4.0"
//    //memory leaks
//    implementation 'com.squareup.leakcanary:leakcanary-android:2.13'
//    implementation 'com.readystatesoftware.chuck:library:1.1.0'

    implementation "com.squareup.okhttp3:okhttp:5.1.0"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:5.1.0"
    implementation 'com.google.code.gson:gson:2.13.2'

    implementation platform('com.google.firebase:firebase-bom:34.3.0')
    implementation "com.google.firebase:firebase-perf"
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-crashlytics-ndk'
}